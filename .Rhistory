plot(hClustering)
par(mar = c(4, 1, 1, 1))
plot(hClustering)
par(mar = c(4, 4, 1, 1))
plot(hClustering)
par(mar = c(5, 4, 1, 1))
plot(hClustering)
par(mar = c(7, 4, 1, 1))
plot(hClustering)
par(mar = c(5, 4, 2, 1))
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
dataFrame
heatmap(dataMatrix)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
kmeansObj$centers
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
rm(list = ls())
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = .4, col = "red")
5
abline(h = .05, col = "green")
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, cm.colors(25))
heatmap(dataMatrix, cm.colors(25))
heatmap(dataMatrix)
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, nexCx, newCy)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col=c("black","red","green"), pch =3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
q()
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
rep(1:3, each = 4)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
class(hClustering)
par(mar = c(5, 4, 2, 1))
plot(hClustering)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
sample(1:12)
sample(1:12)
set.seed(143)
sample(1:12)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
dataMatrix
dataMatrix[sample(1:12)]
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
# kmeans()
# Important parameters: x, centers, iter.max, nstart
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
# Heatmaps
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
dataMatrix[1,]
rep(c(0, 3), each = 5)
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
dataMatrix
t(dataMatrix)
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
hh
dataMatrixOrdered <- dataMatrix[hh$order, ]
head(dataMatrixOrdered)
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3), mar = c(0,0,0,0))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3), mar = c(4,0,0,0))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3), mar = c(5,0,0,0))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3), mar = c(4,4,0,0))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3), mar = c(4,5,0,0))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3), mar = c(4,3,0,0))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3), mar = c(4,4,4,0))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3), mar = c(4,4,0,0))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
class(svd1)
svd1
svd1$d
svd1$u
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular vector",
pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 3), mar = c(4,4,0,1))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular vector",
pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained",
pch = 19)
a <- c(3,1,1)
b <- c(-1,3,1)
A <- as.matrix(a,b)
A
A <- as.matrix(row(a), row(b))
row(a)
row(a)
A <- matrix(a,b, nrow=2)
A <- matrix(a,b)
?matrix
A <- matrix(c(a,b))
A
A <- matrix(c(a,b), nrow = 2)
A
a
b
A <- rbind(a,b)
A
A <- as.matrix(A)
A
A * t(A)
A %*% t(A)
At <- A %*% t(A)
A
At
A_At <- A %*% t(A)
At <- t(A)
A*At
A%*%At
eigen(A_At)
1/sqrt(2)
svd(A_At)
svd(A)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3), mar = c(4,4,0,1))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular vector",
pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
rm(list = ls())
library(swirl)
swirl()
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
q()
install.packages("UsingR")
library(UsingR)
data("father.son",package="UsingR")
str(father.son)
summary(father.son)
sons71 <- subset(father.son, round(father.son$fheight) == 71)
summary(sons71)
X = matrix(1:1000,100,10)
X[25,3]
x = 1:10
cbind(x,2*x,3*x,4*x,5*x)
sum(x[7,])
x[7,]
x
xx <- cbind(x,2*x,3*x,4*x,5*x)
xx[7,]
sum(xx[7,])
matrix(1:60,20,3)
matrix(1:60,20,3,byrow=TRUE)
x=1:40;matrix(3*x,20,2)
X <- matrix(c(1,3,2,1,-2,1,1,1,-1),3,3)
y <- matrix(c(6,2,1),3,1)
x
X
Y
y
solve(X)
solve(x)
solve(X)%*%y
?solve
solve
?solve
solve(X,y)
matrix(1,ncol(X)
)
x <- matrix(c(3,2,1,5,4,2,-1,0,-5,2,5,0,1,-1,-5,1),4,4)
x
y <- matrix(c(10,5,7,4),4,1)
y
solve(x,y)
a <- matrix(1:12, nrow=4)
b <- matrix(1:15, nrow=3)
a
b
c <- a%*%b
c
c[3,2]
s <- a[3,] * b[,2]
s
sum(s)
rm(list= ls())
library(swirl)
swirl()
install_from_swirl("R Programming")
install_from_swirl("Getting and Cleaning Data")
swirl()
uninstall_course("Overview of Statistics")
swirl()
play()
nxt()
help()
q()
activity <- read.csv("./data/activity.csv")
setwd("~/R/RResearch/p1/RepData_PeerAssessment1")
activity <- read.csv("./data/activity.csv")
activity$date <- as.Date(activity$date)
steps <- tapply(activity$steps, activity$date, sum)
medianSteps <- median(steps, na.rm = TRUE)
meanSteps <- mean(steps, na.rm = TRUE)
str(activity)
plot(activity$steps, activity$interval, type = 'l')
plot(activity$interval, activity$steps, type = 'l')
steps.interval <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(steps.interval, type = "l")
avgSteps <- tapply(activity$steps, activity$interval, mean)
plot(avgSteps, type = "l", col = "blue")
plot(activity$interval, avgSteps, type = "l", col = "blue")
seq_along(length(avgSteps))
seq_along(avgSteps)
plot(seq_along(avgSteps), avgSteps, type = "l", col = "blue")
avgSteps <- tapply(activity$steps, activity$interval, mean)
plot(seq_along(avgSteps), avgSteps, type = "l", col = "blue")
length(seq_along(avgSteps))
length(avgSteps)
?plot
na.exclude(avgSteps)
na.omit(avgSteps)
head(steps.interval)
avgSteps <- aggregate(steps ~ interval, data = activity, mean)
plot(avgSteps, type = "l", col = "blue")
max(avgSteps)
avgSteps[max(avgSteps)]
which.max(avgSteps)
avgSteps
which.max(avgSteps$interval)
which.max(avgSteps$steps)
avgSteps$interval[which.max(avgSteps$steps)]
length(activity)
nrow(activity)
?complete.cases
ok <- complete.cases(activity)
ok[1:10]
?dapply
?sapply
is.na(activity)
a <- is.na(activity$steps)
sum(a)
a <- is.na(activity$date)
sum(b)
sum(a)
a <- is.na(activity$interval)
sum(a)
length(activity$steps)
sum(is.na(activity))
medianSteps <- median(steps)
meanSteps <- mean(steps)
is.na(activity$steps[1]
)
is.na(activity$steps[100])
steps[1]
steps[1:10]
stepsPerDay <- tapply(activity$steps, activity$date, function {sum(na.rm = TRUE)})
stepsPerDay <- tapply(activity$steps, activity$date, function (x) sum(na.rm = TRUE))
stepsPerDay[1:10]
stepsPerDay <- tapply(activity$steps, activity$date, function (x) sum(x, na.rm = TRUE))
stepsPerDay[1:10]
stepsPerDay["2012-10-03"]
stepsPerDay[activity$date == "2012-10-03"]
activity$date[3,]
activity$date[3]
activity$date[1]
activity$date[2]
stepsPerDay[activity$date[1]]
activity$date[1]
stepsPerDay["2012-10-01"]
stepsPerDay[as.character(activity$date[1])]
summary(activity)
head(activity)
for (i in length(activity$steps)) {
if (is.na(activity$steps[i])) {
activity$steps[i] <- stepsPerDay[as.character(activity$date[i])]
}
}
summary(activity)
head(activity)
length(activity$steps)
for (i in 1:length(activity$steps)) {
if (is.na(activity$steps[i])) {
activity$steps[i] <- stepsPerDay[as.character(activity$date[i])]
}
}
summary(activity)
head(activity)
activity <- read.csv("./data/activity.csv")
activity$date <- as.Date(activity$date)
steps <- tapply(activity$steps, activity$date, sum)
hist(steps)
t
t
stepsNew <- tapply(activityNew$steps, activityNew$date, sum)
activityNew <- activity
for (i in 1:length(activityNew$steps)) {
if (is.na(activityNew$steps[i])) {
activityNew$steps[i] <- stepsPerDay[as.character(activityNew$date[i])]
}
}
stepsNew <- tapply(activityNew$steps, activityNew$date, sum)
hist(stepsNew)
hist(stepsNew, xlab = "# of Steps")
medianStepsNew <- median(stepsNew)
meanStepsNew <- mean(stepsNew)
medianStepsNew <- median(stepsNew)
meanStepsNew <- mean(stepsNew)
medianStepsNew <- median(stepsNew, na.rm = TRUE)
medianStepsNew <- median(stepsNew)
meanStepsNew <- mean(stepsNew)
medianSteps <- median(steps, na.rm = TRUE)
meanSteps <- mean(steps, na.rm = TRUE)
1.076618910^{4}
meanSteps <- mean(steps, na.rm = TRUE)
mean(steps, na.rm = TRUE)
?weekdays
weekdays("2016-07-17")
weekdays(2016-07-17)
weekdays(as.Date("2016-07-17")
)
weekdays()
weekdays(as.Date("2016-07-18")
)
weekdays(as.Date("2016-07-19"))
weekdays(as.Date("2016-07-20"))
weekdays(as.Date("2016-07-21"))
weekdays(as.Date("2016-07-22"))
weekdays(as.Date("2016-07-23"))
activityNew$dayWeek <- factor(weekdays(activityNew$date))
levels(activityNew$dayWeek)
levels(activityNew$dayWeek) <- dayNames
dayNames <- list(weekday = c("segunda-feira", "terça-feira", "quarta-feira",
"quinta-feira", "sexta-feira"),
weekend = c("sábado", "domingo"))
levels(activityNew$dayWeek) <- dayNames
levels(activityNew$dayWeek)
